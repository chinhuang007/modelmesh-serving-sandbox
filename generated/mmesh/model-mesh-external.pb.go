// Copyright 2021 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: mmesh/model-mesh-external.proto

package mmesh

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModelStatusInfo_ModelStatus int32

const (
	// model is not registered with the cluster
	ModelStatusInfo_NOT_FOUND ModelStatusInfo_ModelStatus = 0
	// model is registered but not currently loaded anywhere
	ModelStatusInfo_NOT_LOADED ModelStatusInfo_ModelStatus = 1
	// model is in the process of loading somewhere (and otherwise not loaded)
	ModelStatusInfo_LOADING ModelStatusInfo_ModelStatus = 2
	// model is loaded in at least one cluster instance
	ModelStatusInfo_LOADED ModelStatusInfo_ModelStatus = 3
	// model loading failed; will be retried periodically
	ModelStatusInfo_LOADING_FAILED ModelStatusInfo_ModelStatus = 4
	ModelStatusInfo_UNKNOWN        ModelStatusInfo_ModelStatus = 5
)

// Enum value maps for ModelStatusInfo_ModelStatus.
var (
	ModelStatusInfo_ModelStatus_name = map[int32]string{
		0: "NOT_FOUND",
		1: "NOT_LOADED",
		2: "LOADING",
		3: "LOADED",
		4: "LOADING_FAILED",
		5: "UNKNOWN",
	}
	ModelStatusInfo_ModelStatus_value = map[string]int32{
		"NOT_FOUND":      0,
		"NOT_LOADED":     1,
		"LOADING":        2,
		"LOADED":         3,
		"LOADING_FAILED": 4,
		"UNKNOWN":        5,
	}
)

func (x ModelStatusInfo_ModelStatus) Enum() *ModelStatusInfo_ModelStatus {
	p := new(ModelStatusInfo_ModelStatus)
	*p = x
	return p
}

func (x ModelStatusInfo_ModelStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelStatusInfo_ModelStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_model_mesh_external_proto_enumTypes[0].Descriptor()
}

func (ModelStatusInfo_ModelStatus) Type() protoreflect.EnumType {
	return &file_mmesh_model_mesh_external_proto_enumTypes[0]
}

func (x ModelStatusInfo_ModelStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelStatusInfo_ModelStatus.Descriptor instead.
func (ModelStatusInfo_ModelStatus) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{2, 0}
}

type VModelStatusInfo_VModelStatus int32

const (
	// vmodel is not registered with the cluster
	VModelStatusInfo_NOT_FOUND VModelStatusInfo_VModelStatus = 0
	// vmodel is registered and in a steady-state (activeModelId == targetModelId)
	VModelStatusInfo_DEFINED VModelStatusInfo_VModelStatus = 1
	// vmodel is waiting for a new target model to be ready before
	// transitioning to it (activeModelId != targetModelId)
	VModelStatusInfo_TRANSITIONING VModelStatusInfo_VModelStatus = 2
	// the target model failed to load and so the transition is blocked;
	// will be retried periodically so *may* automatically recover from this state
	VModelStatusInfo_TRANSITION_FAILED VModelStatusInfo_VModelStatus = 3
	VModelStatusInfo_UNKNOWN           VModelStatusInfo_VModelStatus = 5
)

// Enum value maps for VModelStatusInfo_VModelStatus.
var (
	VModelStatusInfo_VModelStatus_name = map[int32]string{
		0: "NOT_FOUND",
		1: "DEFINED",
		2: "TRANSITIONING",
		3: "TRANSITION_FAILED",
		5: "UNKNOWN",
	}
	VModelStatusInfo_VModelStatus_value = map[string]int32{
		"NOT_FOUND":         0,
		"DEFINED":           1,
		"TRANSITIONING":     2,
		"TRANSITION_FAILED": 3,
		"UNKNOWN":           5,
	}
)

func (x VModelStatusInfo_VModelStatus) Enum() *VModelStatusInfo_VModelStatus {
	p := new(VModelStatusInfo_VModelStatus)
	*p = x
	return p
}

func (x VModelStatusInfo_VModelStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VModelStatusInfo_VModelStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_model_mesh_external_proto_enumTypes[1].Descriptor()
}

func (VModelStatusInfo_VModelStatus) Type() protoreflect.EnumType {
	return &file_mmesh_model_mesh_external_proto_enumTypes[1]
}

func (x VModelStatusInfo_VModelStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VModelStatusInfo_VModelStatus.Descriptor instead.
func (VModelStatusInfo_VModelStatus) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{7, 0}
}

type RegisterModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId   string     `protobuf:"bytes,1,opt,name=modelId,proto3" json:"modelId,omitempty"`
	ModelInfo *ModelInfo `protobuf:"bytes,2,opt,name=modelInfo,proto3" json:"modelInfo,omitempty"`
	// whether the model should be loaded immediately
	LoadNow bool `protobuf:"varint,3,opt,name=loadNow,proto3" json:"loadNow,omitempty"`
	// if loadNow is true, whether this method should block until the load completes
	Sync bool `protobuf:"varint,4,opt,name=sync,proto3" json:"sync,omitempty"`
	// OPTIONAL, ADVANCED - lastUsed timestamp to assign to newly registered
	// model, for initial priority in cache. This should not typically be set
	// (defaults to "recent")
	LastUsedTime uint64 `protobuf:"varint,5,opt,name=lastUsedTime,proto3" json:"lastUsedTime,omitempty"`
}

func (x *RegisterModelRequest) Reset() {
	*x = RegisterModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterModelRequest) ProtoMessage() {}

func (x *RegisterModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterModelRequest.ProtoReflect.Descriptor instead.
func (*RegisterModelRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterModelRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *RegisterModelRequest) GetModelInfo() *ModelInfo {
	if x != nil {
		return x.ModelInfo
	}
	return nil
}

func (x *RegisterModelRequest) GetLoadNow() bool {
	if x != nil {
		return x.LoadNow
	}
	return false
}

func (x *RegisterModelRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

func (x *RegisterModelRequest) GetLastUsedTime() uint64 {
	if x != nil {
		return x.LastUsedTime
	}
	return 0
}

// Parameters holding information necessary to locate and load a given model,
// optional and for use only by your model runtime logic - they are passed to
// the model runtime loadModel api each time the model is loaded.
// These should *not* be use to store large amounts of data - the size of the
// strings should be as small as possible.
type ModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// arbitrary model metadata parameter, must be non-empty
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// arbitrary model metadata parameter
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// arbitrary model metadata parameter
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ModelInfo) Reset() {
	*x = ModelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInfo) ProtoMessage() {}

func (x *ModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInfo.ProtoReflect.Descriptor instead.
func (*ModelInfo) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{1}
}

func (x *ModelInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ModelInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ModelInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ModelStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ModelStatusInfo_ModelStatus `protobuf:"varint,1,opt,name=status,proto3,enum=mmesh.ModelStatusInfo_ModelStatus" json:"status,omitempty"`
	Errors []string                    `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// Internal state of individual copies of this model - intended for
	// debugging/advanced uses only. The top-level model status field
	// should be sufficient for most cases. Arranged in reverse chronological order.
	ModelCopyInfos []*ModelStatusInfo_ModelCopyInfo `protobuf:"bytes,3,rep,name=modelCopyInfos,proto3" json:"modelCopyInfos,omitempty"`
}

func (x *ModelStatusInfo) Reset() {
	*x = ModelStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelStatusInfo) ProtoMessage() {}

func (x *ModelStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelStatusInfo.ProtoReflect.Descriptor instead.
func (*ModelStatusInfo) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{2}
}

func (x *ModelStatusInfo) GetStatus() ModelStatusInfo_ModelStatus {
	if x != nil {
		return x.Status
	}
	return ModelStatusInfo_NOT_FOUND
}

func (x *ModelStatusInfo) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ModelStatusInfo) GetModelCopyInfos() []*ModelStatusInfo_ModelCopyInfo {
	if x != nil {
		return x.ModelCopyInfos
	}
	return nil
}

type UnregisterModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId string `protobuf:"bytes,1,opt,name=modelId,proto3" json:"modelId,omitempty"`
}

func (x *UnregisterModelRequest) Reset() {
	*x = UnregisterModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterModelRequest) ProtoMessage() {}

func (x *UnregisterModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterModelRequest.ProtoReflect.Descriptor instead.
func (*UnregisterModelRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{3}
}

func (x *UnregisterModelRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

type UnregisterModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnregisterModelResponse) Reset() {
	*x = UnregisterModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterModelResponse) ProtoMessage() {}

func (x *UnregisterModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterModelResponse.ProtoReflect.Descriptor instead.
func (*UnregisterModelResponse) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{4}
}

type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId string `protobuf:"bytes,1,opt,name=modelId,proto3" json:"modelId,omitempty"`
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{5}
}

func (x *GetStatusRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

type EnsureLoadedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId string `protobuf:"bytes,1,opt,name=modelId,proto3" json:"modelId,omitempty"`
	// timestamp to use when touching the model, 0 for "now" (default)
	LastUsedTime uint64 `protobuf:"varint,2,opt,name=lastUsedTime,proto3" json:"lastUsedTime,omitempty"`
	// whether to block until specified model completes loading
	Sync bool `protobuf:"varint,4,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *EnsureLoadedRequest) Reset() {
	*x = EnsureLoadedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureLoadedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureLoadedRequest) ProtoMessage() {}

func (x *EnsureLoadedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureLoadedRequest.ProtoReflect.Descriptor instead.
func (*EnsureLoadedRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{6}
}

func (x *EnsureLoadedRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *EnsureLoadedRequest) GetLastUsedTime() uint64 {
	if x != nil {
		return x.LastUsedTime
	}
	return 0
}

func (x *EnsureLoadedRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type VModelStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status VModelStatusInfo_VModelStatus `protobuf:"varint,1,opt,name=status,proto3,enum=mmesh.VModelStatusInfo_VModelStatus" json:"status,omitempty"`
	// id of underlying model to which apply/prediction
	// requests sent to this vmodel will be routed
	ActiveModelId string `protobuf:"bytes,2,opt,name=activeModelId,proto3" json:"activeModelId,omitempty"`
	// if targetModelId is not equal to activeModelId
	// then the vmodel is in a transitional state (waiting for
	// the target model to be in an appropriate state before
	// it's promoted to be the active model)
	TargetModelId string `protobuf:"bytes,3,opt,name=targetModelId,proto3" json:"targetModelId,omitempty"`
	// status of the currently active model
	ActiveModelStatus *ModelStatusInfo `protobuf:"bytes,4,opt,name=activeModelStatus,proto3" json:"activeModelStatus,omitempty"`
	// status of the target model, set only if targetModelId != activeModelId
	TargetModelStatus *ModelStatusInfo `protobuf:"bytes,5,opt,name=targetModelStatus,proto3" json:"targetModelStatus,omitempty"`
	// the owner of this vmodel, if any
	Owner string `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *VModelStatusInfo) Reset() {
	*x = VModelStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VModelStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VModelStatusInfo) ProtoMessage() {}

func (x *VModelStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VModelStatusInfo.ProtoReflect.Descriptor instead.
func (*VModelStatusInfo) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{7}
}

func (x *VModelStatusInfo) GetStatus() VModelStatusInfo_VModelStatus {
	if x != nil {
		return x.Status
	}
	return VModelStatusInfo_NOT_FOUND
}

func (x *VModelStatusInfo) GetActiveModelId() string {
	if x != nil {
		return x.ActiveModelId
	}
	return ""
}

func (x *VModelStatusInfo) GetTargetModelId() string {
	if x != nil {
		return x.TargetModelId
	}
	return ""
}

func (x *VModelStatusInfo) GetActiveModelStatus() *ModelStatusInfo {
	if x != nil {
		return x.ActiveModelStatus
	}
	return nil
}

func (x *VModelStatusInfo) GetTargetModelStatus() *ModelStatusInfo {
	if x != nil {
		return x.TargetModelStatus
	}
	return nil
}

func (x *VModelStatusInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type DeleteVModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VModelId string `protobuf:"bytes,1,opt,name=vModelId,proto3" json:"vModelId,omitempty"`
	// if provided the specified vmodel will be deleted only if its owner matches
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *DeleteVModelRequest) Reset() {
	*x = DeleteVModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVModelRequest) ProtoMessage() {}

func (x *DeleteVModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVModelRequest.ProtoReflect.Descriptor instead.
func (*DeleteVModelRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteVModelRequest) GetVModelId() string {
	if x != nil {
		return x.VModelId
	}
	return ""
}

func (x *DeleteVModelRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type DeleteVModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVModelResponse) Reset() {
	*x = DeleteVModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVModelResponse) ProtoMessage() {}

func (x *DeleteVModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVModelResponse.ProtoReflect.Descriptor instead.
func (*DeleteVModelResponse) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{9}
}

type SetVModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VModelId string `protobuf:"bytes,1,opt,name=vModelId,proto3" json:"vModelId,omitempty"`
	// if set and the vmodel does not already exist, it will be created with this owner.
	// if set and the vmodel already exists, the existing vmodel's owner must match or else
	// the call will fail with an ALREADY_EXISTS error
	Owner         string `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
	TargetModelId string `protobuf:"bytes,2,opt,name=targetModelId,proto3" json:"targetModelId,omitempty"`
	// if true, the request will fail with NOT_FOUND if the vmodel does not already exist;
	// if false, non-existent vmodel ids will be created
	UpdateOnly bool `protobuf:"varint,3,opt,name=updateOnly,proto3" json:"updateOnly,omitempty"`
	// optional ModelInfo for target model - if provided then target model will be created,
	// otherwise it's expected to already exist
	ModelInfo *ModelInfo `protobuf:"bytes,4,opt,name=modelInfo,proto3" json:"modelInfo,omitempty"`
	// whether the newly created target model should be automatically deleted
	// once no longer referenced by any vmodel(s); applies only if modelInfo is provided
	AutoDeleteTargetModel bool `protobuf:"varint,5,opt,name=autoDeleteTargetModel,proto3" json:"autoDeleteTargetModel,omitempty"`
	// whether the new target model should be loaded immediately, even if the current
	// active model isn't loaded (otherwise the target model will be loaded to
	// the same scale as the current active model before it becomes the active model)
	LoadNow bool `protobuf:"varint,6,opt,name=loadNow,proto3" json:"loadNow,omitempty"`
	// if true, the active model will be updated immediately, regardless of the relative
	// states of the target and currently-active models
	Force bool `protobuf:"varint,7,opt,name=force,proto3" json:"force,omitempty"`
	// whether this method should block until the transition completes. if the vmodel
	// didn't already exist and loadNow is set to true, this will cause the method to
	// block until the target of the newly created vmodel has completed loading
	Sync bool `protobuf:"varint,8,opt,name=sync,proto3" json:"sync,omitempty"`
	// if provided, the request will only succeed (atomically) if the value matches the
	// vmodel's current targetModelId. If the provided value is equal to the
	// targetModelId in this same request message, the request will succeed only if
	// the vmodel doesn't already exist *or* exists with the same targetModelId (in
	// the latter case having no effect)
	ExpectedTargetModelId string `protobuf:"bytes,9,opt,name=expectedTargetModelId,proto3" json:"expectedTargetModelId,omitempty"`
}

func (x *SetVModelRequest) Reset() {
	*x = SetVModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVModelRequest) ProtoMessage() {}

func (x *SetVModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVModelRequest.ProtoReflect.Descriptor instead.
func (*SetVModelRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{10}
}

func (x *SetVModelRequest) GetVModelId() string {
	if x != nil {
		return x.VModelId
	}
	return ""
}

func (x *SetVModelRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *SetVModelRequest) GetTargetModelId() string {
	if x != nil {
		return x.TargetModelId
	}
	return ""
}

func (x *SetVModelRequest) GetUpdateOnly() bool {
	if x != nil {
		return x.UpdateOnly
	}
	return false
}

func (x *SetVModelRequest) GetModelInfo() *ModelInfo {
	if x != nil {
		return x.ModelInfo
	}
	return nil
}

func (x *SetVModelRequest) GetAutoDeleteTargetModel() bool {
	if x != nil {
		return x.AutoDeleteTargetModel
	}
	return false
}

func (x *SetVModelRequest) GetLoadNow() bool {
	if x != nil {
		return x.LoadNow
	}
	return false
}

func (x *SetVModelRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *SetVModelRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

func (x *SetVModelRequest) GetExpectedTargetModelId() string {
	if x != nil {
		return x.ExpectedTargetModelId
	}
	return ""
}

type GetVModelStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VModelId string `protobuf:"bytes,1,opt,name=vModelId,proto3" json:"vModelId,omitempty"`
	// if provided the specified vmodel must have matching owner or else the returned
	// response will indicate not found
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *GetVModelStatusRequest) Reset() {
	*x = GetVModelStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVModelStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVModelStatusRequest) ProtoMessage() {}

func (x *GetVModelStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVModelStatusRequest.ProtoReflect.Descriptor instead.
func (*GetVModelStatusRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{11}
}

func (x *GetVModelStatusRequest) GetVModelId() string {
	if x != nil {
		return x.VModelId
	}
	return ""
}

func (x *GetVModelStatusRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type ModelStatusInfo_ModelCopyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of instance in which the model copy resides
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// status of this copy, one of LOADING, LOADED, LOADING_FAILED, UNKNOWN
	CopyStatus ModelStatusInfo_ModelStatus `protobuf:"varint,2,opt,name=copyStatus,proto3,enum=mmesh.ModelStatusInfo_ModelStatus" json:"copyStatus,omitempty"`
	// time of latest state change
	Time uint64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ModelStatusInfo_ModelCopyInfo) Reset() {
	*x = ModelStatusInfo_ModelCopyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_model_mesh_external_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelStatusInfo_ModelCopyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelStatusInfo_ModelCopyInfo) ProtoMessage() {}

func (x *ModelStatusInfo_ModelCopyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_model_mesh_external_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelStatusInfo_ModelCopyInfo.ProtoReflect.Descriptor instead.
func (*ModelStatusInfo_ModelCopyInfo) Descriptor() ([]byte, []int) {
	return file_mmesh_model_mesh_external_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ModelStatusInfo_ModelCopyInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ModelStatusInfo_ModelCopyInfo) GetCopyStatus() ModelStatusInfo_ModelStatus {
	if x != nil {
		return x.CopyStatus
	}
	return ModelStatusInfo_NOT_FOUND
}

func (x *ModelStatusInfo_ModelCopyInfo) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

var File_mmesh_model_mesh_external_proto protoreflect.FileDescriptor

var file_mmesh_model_mesh_external_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x6d, 0x65,
	0x73, 0x68, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x61, 0x64, 0x4e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f,
	0x61, 0x64, 0x4e, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x45, 0x0a,
	0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0xa1, 0x03, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x0e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x83, 0x01, 0x0a, 0x0d, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x70, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x66, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c,
	0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x41, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x22, 0x32, 0x0a, 0x16, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17,
	0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x13, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x22, 0xa1, 0x03, 0x0a, 0x10, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x0c, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x22, 0x47, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xea, 0x02, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c,
	0x6f, 0x61, 0x64, 0x4e, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63,
	0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x32, 0x8b, 0x04, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x68,
	0x12, 0x46, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x1b, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e,
	0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17,
	0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x12, 0x1a, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x56, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x53, 0x65, 0x74,
	0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x56, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00,
	0x42, 0x28, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x62, 0x6d, 0x2e, 0x77, 0x61, 0x74, 0x73,
	0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x61, 0x70, 0x69,
	0x50, 0x01, 0x5a, 0x06, 0x2f, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_mmesh_model_mesh_external_proto_rawDescOnce sync.Once
	file_mmesh_model_mesh_external_proto_rawDescData = file_mmesh_model_mesh_external_proto_rawDesc
)

func file_mmesh_model_mesh_external_proto_rawDescGZIP() []byte {
	file_mmesh_model_mesh_external_proto_rawDescOnce.Do(func() {
		file_mmesh_model_mesh_external_proto_rawDescData = protoimpl.X.CompressGZIP(file_mmesh_model_mesh_external_proto_rawDescData)
	})
	return file_mmesh_model_mesh_external_proto_rawDescData
}

var file_mmesh_model_mesh_external_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mmesh_model_mesh_external_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_mmesh_model_mesh_external_proto_goTypes = []interface{}{
	(ModelStatusInfo_ModelStatus)(0),      // 0: mmesh.ModelStatusInfo.ModelStatus
	(VModelStatusInfo_VModelStatus)(0),    // 1: mmesh.VModelStatusInfo.VModelStatus
	(*RegisterModelRequest)(nil),          // 2: mmesh.RegisterModelRequest
	(*ModelInfo)(nil),                     // 3: mmesh.ModelInfo
	(*ModelStatusInfo)(nil),               // 4: mmesh.ModelStatusInfo
	(*UnregisterModelRequest)(nil),        // 5: mmesh.UnregisterModelRequest
	(*UnregisterModelResponse)(nil),       // 6: mmesh.UnregisterModelResponse
	(*GetStatusRequest)(nil),              // 7: mmesh.GetStatusRequest
	(*EnsureLoadedRequest)(nil),           // 8: mmesh.EnsureLoadedRequest
	(*VModelStatusInfo)(nil),              // 9: mmesh.VModelStatusInfo
	(*DeleteVModelRequest)(nil),           // 10: mmesh.DeleteVModelRequest
	(*DeleteVModelResponse)(nil),          // 11: mmesh.DeleteVModelResponse
	(*SetVModelRequest)(nil),              // 12: mmesh.SetVModelRequest
	(*GetVModelStatusRequest)(nil),        // 13: mmesh.GetVModelStatusRequest
	(*ModelStatusInfo_ModelCopyInfo)(nil), // 14: mmesh.ModelStatusInfo.ModelCopyInfo
}
var file_mmesh_model_mesh_external_proto_depIdxs = []int32{
	3,  // 0: mmesh.RegisterModelRequest.modelInfo:type_name -> mmesh.ModelInfo
	0,  // 1: mmesh.ModelStatusInfo.status:type_name -> mmesh.ModelStatusInfo.ModelStatus
	14, // 2: mmesh.ModelStatusInfo.modelCopyInfos:type_name -> mmesh.ModelStatusInfo.ModelCopyInfo
	1,  // 3: mmesh.VModelStatusInfo.status:type_name -> mmesh.VModelStatusInfo.VModelStatus
	4,  // 4: mmesh.VModelStatusInfo.activeModelStatus:type_name -> mmesh.ModelStatusInfo
	4,  // 5: mmesh.VModelStatusInfo.targetModelStatus:type_name -> mmesh.ModelStatusInfo
	3,  // 6: mmesh.SetVModelRequest.modelInfo:type_name -> mmesh.ModelInfo
	0,  // 7: mmesh.ModelStatusInfo.ModelCopyInfo.copyStatus:type_name -> mmesh.ModelStatusInfo.ModelStatus
	2,  // 8: mmesh.ModelMesh.registerModel:input_type -> mmesh.RegisterModelRequest
	5,  // 9: mmesh.ModelMesh.unregisterModel:input_type -> mmesh.UnregisterModelRequest
	7,  // 10: mmesh.ModelMesh.getModelStatus:input_type -> mmesh.GetStatusRequest
	8,  // 11: mmesh.ModelMesh.ensureLoaded:input_type -> mmesh.EnsureLoadedRequest
	12, // 12: mmesh.ModelMesh.setVModel:input_type -> mmesh.SetVModelRequest
	10, // 13: mmesh.ModelMesh.deleteVModel:input_type -> mmesh.DeleteVModelRequest
	13, // 14: mmesh.ModelMesh.getVModelStatus:input_type -> mmesh.GetVModelStatusRequest
	4,  // 15: mmesh.ModelMesh.registerModel:output_type -> mmesh.ModelStatusInfo
	6,  // 16: mmesh.ModelMesh.unregisterModel:output_type -> mmesh.UnregisterModelResponse
	4,  // 17: mmesh.ModelMesh.getModelStatus:output_type -> mmesh.ModelStatusInfo
	4,  // 18: mmesh.ModelMesh.ensureLoaded:output_type -> mmesh.ModelStatusInfo
	9,  // 19: mmesh.ModelMesh.setVModel:output_type -> mmesh.VModelStatusInfo
	11, // 20: mmesh.ModelMesh.deleteVModel:output_type -> mmesh.DeleteVModelResponse
	9,  // 21: mmesh.ModelMesh.getVModelStatus:output_type -> mmesh.VModelStatusInfo
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_mmesh_model_mesh_external_proto_init() }
func file_mmesh_model_mesh_external_proto_init() {
	if File_mmesh_model_mesh_external_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mmesh_model_mesh_external_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsureLoadedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VModelStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVModelStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_model_mesh_external_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelStatusInfo_ModelCopyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_model_mesh_external_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mmesh_model_mesh_external_proto_goTypes,
		DependencyIndexes: file_mmesh_model_mesh_external_proto_depIdxs,
		EnumInfos:         file_mmesh_model_mesh_external_proto_enumTypes,
		MessageInfos:      file_mmesh_model_mesh_external_proto_msgTypes,
	}.Build()
	File_mmesh_model_mesh_external_proto = out.File
	file_mmesh_model_mesh_external_proto_rawDesc = nil
	file_mmesh_model_mesh_external_proto_goTypes = nil
	file_mmesh_model_mesh_external_proto_depIdxs = nil
}
